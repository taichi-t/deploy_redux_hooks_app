{"version":3,"sources":["store/reducers/projectReducer.js","components/TodoInput.jsx","store/actions.js","components/TodoList.jsx","components/Navbar.jsx","GlobalStyle.jsx","App.js","hooks/useDarkMode.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["initialState","todos","projectReducer","state","type","payload","map","todo","id","complete","filter","TodoInput","useState","setTodo","dispatch","useDispatch","Container","Paper","onSubmit","e","preventDefault","trim","addTodoAction","addTodo","uuidv4","name","action","noValidate","autoComplete","style","padding","Box","Input","placeholder","value","onChange","target","Button","color","startIcon","styled","div","TodoList","theme","useTheme","useSelector","toggleTodo","todoId","toggleTodoAction","deleteTodo","deleteTodoAction","message","length","Message","palette","text","hint","key","onClick","bind","ItemLeft","Checkbox","checked","Text","ItemRight","variant","span","props","p","Navbar","isDarkMode","setIsDarkMode","toggleDarkMode","AppBar","position","Toolbar","Title","primary","size","speed","h1","GlobalStyle","createGlobalStyle","background","default","themeObject","main","secondary","App","setTheme","updatedTheme","useDarkMode","persistedState","localStorage","getItem","JSON","parse","store","createStore","window","devToolsExtension","subscribe","setItem","stringify","getState","themeConfig","createMuiTheme","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e9176ef5.chunk.js","sourcesContent":["const initialState = { todos: [] };\n\nexport function projectReducer(state = initialState, { type, payload }) {\n  switch (type) {\n    case \"ADD_TODO\":\n      return {\n        ...state,\n        todos: [...state.todos, payload],\n      };\n    case \"TOGGLE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === payload ? { ...todo, complete: !todo.complete } : todo\n        ),\n      };\n    case \"DELETE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== payload),\n      };\n    default:\n      return state;\n  }\n}\n\nexport default projectReducer;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodoAction } from \"../store/actions\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n//style\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport styled from \"styled-components\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport const TodoInput = () => {\n  const [todo, setTodo] = useState(\"\");\n  const dispatch = useDispatch();\n  const addTodo = (todo) => dispatch(addTodoAction(todo));\n\n  const onChange = (e) => {\n    setTodo(e.target.value);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (todo.trim() === \"\") return;\n    addTodo({\n      id: uuidv4(),\n      name: todo,\n      complete: false,\n    });\n    setTodo(\"\");\n  };\n  return (\n    <Container>\n      <Paper>\n        <form\n          onSubmit={onSubmit}\n          action=\"submit\"\n          noValidate\n          autoComplete=\"off\"\n          style={{ padding: \"1rem\" }}\n        >\n          <Box>\n            <Input\n              type=\"text\"\n              name=\"todo\"\n              placeholder=\"create a todo\"\n              value={todo}\n              onChange={onChange}\n            />\n            <Button type=\"submit\" color=\"primary\" startIcon={<AddIcon />}>\n              ADD\n            </Button>\n          </Box>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default TodoInput;\n\n//style\nconst Container = styled.div`\n  text-align: center;\n  font-size: 1.6rem;\n  max-width: 350px;\n  padding: 1rem;\n  margin: 0 auto;\n`;\n\nconst Box = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n","export const addTodoAction = (todo) => ({\n  type: \"ADD_TODO\",\n  payload: todo,\n});\n\nexport const toggleTodoAction = (todoId) => ({\n  type: \"TOGGLE_TODO\",\n  payload: todoId,\n});\n\nexport const deleteTodoAction = (todoId) => ({\n  type: \"DELETE_TODO\",\n  payload: todoId,\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTodoAction, deleteTodoAction } from \"../store/actions\";\n\n//style\nimport styled from \"styled-components\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\nexport const TodoList = () => {\n  const theme = useTheme();\n  const todos = useSelector((state) => state.todos);\n\n  const dispatch = useDispatch();\n  const toggleTodo = (todoId) => dispatch(toggleTodoAction(todoId));\n  const deleteTodo = (todoId) => dispatch(deleteTodoAction(todoId));\n\n  const message =\n    todos.length === 0 ? (\n      <Message color={theme.palette.text.hint}>There is no task...</Message>\n    ) : null;\n  return (\n    <Container>\n      {todos &&\n        todos.map((todo) => (\n          <Paper key={todo.id}>\n            <Box onClick={toggleTodo.bind(null, todo.id)}>\n              <ItemLeft>\n                <Checkbox\n                  type=\"checkbox\"\n                  checked={todo.complete}\n                  color=\"primary\"\n                />\n                <Text complete={todo.complete}>{todo.name}</Text>\n              </ItemLeft>\n\n              <ItemRight>\n                {todo.complete ? (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<DoneIcon />}\n                    onClick={deleteTodo.bind(null, todo.id)}\n                  >\n                    Done\n                  </Button>\n                ) : (\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<DeleteIcon />}\n                    onClick={deleteTodo.bind(null, todo.id)}\n                  >\n                    Delete\n                  </Button>\n                )}\n              </ItemRight>\n            </Box>\n          </Paper>\n        ))}\n      {message}\n    </Container>\n  );\n};\n\nexport default TodoList;\n\nconst Container = styled.div`\n  padding: 1rem;\n  font-size: 1.6rem;\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nconst Box = styled.div`\n  padding: 1rem;\n  margin-bottom: 1rem;\n`;\n\nconst ItemRight = styled.div`\n  text-align: right;\n`;\nconst ItemLeft = styled.div`\n  text-align: left;\n`;\n\nconst Text = styled.span`\n  text-decoration: ${(props) => (props.complete ? \"line-through\" : null)};\n`;\n\nconst Message = styled.p`\n  text-align: center;\n  font-size: 1.4rem;\n  color: ${(props) => props.color};\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\n//style\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nexport const Navbar = (props) => {\n  const theme = useTheme();\n\n  const [isDarkMode, setIsDarkMode] = useState(() => false);\n  const { toggleDarkMode } = props;\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    setIsDarkMode(!isDarkMode);\n    toggleDarkMode();\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n        <Box>\n          <Title color={theme.palette.text.primary}>Awesome Todo list</Title>\n\n          <div onClick={handleClick}>\n            <DarkModeToggle checked={isDarkMode} size={50} speed={6} />\n          </div>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n\n//style\nconst Title = styled.h1`\n  color: ${(props) => props.color};\n  font-size: 2.4rem;\n  text-align: center;\n`;\n\nconst Box = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n  font-size:62.5%;\n  background: ${({ theme }) => theme.palette.background.default};\n  color:${({ theme }) => theme.palette.text.primary};\n  \n  margin:0 auto;\n  font-family: 'Oswald', sans-serif;\n  user-select:text;\n  }\n`;\n\nexport const themeObject = {\n  palette: {\n    type: \"light\",\n    primary: {\n      main: \"#2196f3\",\n    },\n    secondary: {\n      main: \"#f50057\",\n    },\n  },\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport projectReducer from \"./store/reducers/projectReducer\";\nimport { createStore } from \"redux\";\n\n//components\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\nimport Navbar from \"./components/Navbar\";\n\n//style\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n//hooks\nimport { useDarkMode } from \"./hooks/useDarkMode\";\n\nfunction App() {\n  const [theme, toggleDarkMode] = useDarkMode();\n  const persistedState = localStorage.getItem(\"todos\")\n    ? JSON.parse(localStorage.getItem(\"todos\"))\n    : { todos: [] };\n\n  const store = createStore(\n    projectReducer,\n    persistedState,\n    window.devToolsExtension && window.devToolsExtension()\n  );\n\n  store.subscribe(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(store.getState()));\n  });\n\n  const themeConfig = createMuiTheme(theme);\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={themeConfig}>\n        <GlobalStyle theme={themeConfig} />\n        <Navbar toggleDarkMode={toggleDarkMode} />\n        <TodoInput />\n        <TodoList />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\nimport { themeObject } from \"../GlobalStyle\";\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState(themeObject);\n\n  const {\n    palette: { type },\n  } = theme;\n  const toggleDarkMode = () => {\n    const updatedTheme = {\n      ...theme,\n      palette: {\n        ...theme.palette,\n        type: type === \"light\" ? \"dark\" : \"light\",\n      },\n    };\n    setTheme(updatedTheme);\n  };\n  return [theme, toggleDarkMode];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}