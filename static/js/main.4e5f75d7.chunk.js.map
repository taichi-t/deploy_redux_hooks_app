{"version":3,"sources":["store/reducer.js","components/TodoInput.jsx","store/actions.js","components/TodoList.jsx","components/Navbar.jsx","GlobalStyle.jsx","App.js","serviceWorker.js","index.js"],"names":["persistedState","localStorage","getItem","JSON","parse","todos","store","createStore","state","type","payload","map","todo","id","complete","filter","window","devToolsExtension","subscribe","setItem","stringify","getState","TodoInput","useState","setTodo","dispatch","useDispatch","Container","onSubmit","e","preventDefault","trim","addTodoAction","addTodo","uuidv4","name","Input","placeholder","value","onChange","target","Button","color","style","margin","startIcon","styled","div","TodoList","useSelector","toggleTodo","todoId","toggleTodoAction","deleteTodo","deleteTodoAction","message","length","Message","Paper","key","Box","ItemLeft","Checkbox","checked","bind","Text","ItemRight","variant","onClick","span","props","p","Navbar","Title","h1","GlobalStyle","createGlobalStyle","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4e5f75d7.chunk.js","sourcesContent":["import { createStore } from \"redux\";\n\nconst persistedState = localStorage.getItem(\"todos\")\n  ? JSON.parse(localStorage.getItem(\"todos\"))\n  : { todos: [] };\n\nexport const store = createStore(\n  reducer,\n  persistedState,\n  window.devToolsExtension && window.devToolsExtension()\n);\n\nstore.subscribe(() => {\n  localStorage.setItem(\"todos\", JSON.stringify(store.getState()));\n});\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case \"ADD_TODO\":\n      return {\n        ...state,\n        todos: [...state.todos, payload],\n      };\n    case \"TOGGLE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === payload ? { ...todo, complete: !todo.complete } : todo\n        ),\n      };\n    case \"DELETE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== payload),\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodoAction } from \"../store/actions\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n//style\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport styled from \"styled-components\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nexport const TodoInput = () => {\n  const [todo, setTodo] = useState(\"\");\n  const dispatch = useDispatch();\n  const addTodo = (todo) => dispatch(addTodoAction(todo));\n\n  const onChange = (e) => {\n    setTodo(e.target.value);\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (todo.trim() === \"\") return;\n    addTodo({\n      id: uuidv4(),\n      name: todo,\n      complete: false,\n    });\n    setTodo(\"\");\n  };\n  return (\n    <Container>\n      <form onSubmit={onSubmit}>\n        <Input\n          type=\"text\"\n          name=\"todo\"\n          placeholder=\"Add a todo\"\n          value={todo}\n          onChange={onChange}\n        />\n        <Button\n          type=\"submit\"\n          color=\"primary\"\n          style={{ margin: 0 }}\n          startIcon={<AddIcon />}\n        />\n      </form>\n    </Container>\n  );\n};\n\nexport default TodoInput;\n\n//style\nconst Container = styled.div`\n  text-align: center;\n`;\n","export const addTodoAction = (todo) => ({\n  type: \"ADD_TODO\",\n  payload: todo,\n});\n\nexport const toggleTodoAction = (todoId) => ({\n  type: \"TOGGLE_TODO\",\n  payload: todoId,\n});\n\nexport const deleteTodoAction = (todoId) => ({\n  type: \"DELETE_TODO\",\n  payload: todoId,\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTodoAction, deleteTodoAction } from \"../store/actions\";\n\n//style\nimport styled from \"styled-components\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\nexport const TodoList = () => {\n  const todos = useSelector((state) => state.todos);\n  const dispatch = useDispatch();\n  const toggleTodo = (todoId) => dispatch(toggleTodoAction(todoId));\n  const deleteTodo = (todoId) => dispatch(deleteTodoAction(todoId));\n\n  const message =\n    todos.length === 0 ? <Message>There is no task...</Message> : null;\n  return (\n    <Container>\n      {todos.map((todo) => (\n        <Paper key={todo.id}>\n          <Box>\n            <ItemLeft>\n              <Checkbox\n                type=\"checkbox\"\n                checked={todo.complete}\n                onChange={toggleTodo.bind(null, todo.id)}\n                color=\"primary\"\n              />\n              <Text complete={todo.complete}>{todo.name}</Text>\n            </ItemLeft>\n\n            <ItemRight>\n              {todo.complete ? (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  startIcon={<DoneIcon />}\n                  onClick={deleteTodo.bind(null, todo.id)}\n                >\n                  Done\n                </Button>\n              ) : (\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  startIcon={<DeleteIcon />}\n                  onClick={deleteTodo.bind(null, todo.id)}\n                >\n                  Delete\n                </Button>\n              )}\n            </ItemRight>\n          </Box>\n        </Paper>\n      ))}\n      {message}\n    </Container>\n  );\n};\n\nexport default TodoList;\n\nconst Container = styled.div`\n  font-size: 1.6rem;\n`;\n\nconst Box = styled.div`\n  padding: 1rem;\n  margin-bottom: 1rem;\n`;\n\nconst ItemRight = styled.div`\n  text-align: right;\n`;\nconst ItemLeft = styled.div`\n  text-align: left;\n`;\n\nconst Text = styled.span`\n  text-decoration: ${(props) => (props.complete ? \"line-through\" : null)};\n`;\n\nconst Message = styled.p`\n  text-align: center;\n  font-size: 1.4rem;\n  color: #757575;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Navbar = () => {\n  return (\n    <div>\n      <Title>Awesome Todo list</Title>\n    </div>\n  );\n};\n\nexport default Navbar;\n\n//style\nconst Title = styled.h1`\n  font-size: 2.4rem;\n  text-align: center;\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n/* @import url(\"https://fonts.googleapis.com/css2?family=Oswald:wght@400;700&display=swap\"); */\n  body {\n  font-size:62.5%;\n  background-color: #fff;\n  max-width: 350px;\n  margin: 20px auto;\n  font-family: 'Oswald', sans-serif\n  }\n`;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/reducer\";\n\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\nimport Navbar from \"./components/Navbar\";\n\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <GlobalStyle />\n      <Navbar />\n      <TodoInput />\n      <TodoList />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}